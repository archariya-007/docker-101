name: Terraform_$(Date:yyyyMMdd)_$(Rev:r)
appendCommitMessageToRunName: false

trigger: 
  branches:
    include:
    - main 
  paths:
    include:
    - 'Terraform/**'

resources:
  repositories:
    - repository: templates
      type: github
      name: archariya-007/docker-101
      ref: refs/heads/main
      endpoint: Mercury

variables:
- group: Mercury-Terraform-Common

stages:
  - stage: DEV_Terraform
    displayName: Dev Plan and Apply
    dependsOn: []

    variables:
    - group: Mercury-Terraform-DEV    
    - name: serviceAccount
      value: 'TerraformDeploy-DEV'

    jobs:

    - job: CheckChanges
      steps:
      - checkout: self
        # To properly assess if git changes fetch depth has to be at 0
        fetchDepth: 0
      # Check if there are changes in the folder
      - powershell: |
          $sinceYesterday = (Get-Date).AddDays(-1).ToString("yyyy-MM-dd")
          $changes = git log --since=$sinceYesterday --oneline  -- $(folder)
          Write-Host "Changes: $changes"
          if ($changes) 
          {
            Write-Host "##vso[task.setvariable variable=isFolder;isOutput=true]True"
            Write-Host "##vso[task.logissue type=warning;]Changes in $(folder) folder"
            Write-Host $changes
          }
          else 
          {
            Write-Host "##vso[task.setvariable variable=isFolder;isOutput=true]False"
            Write-Host "##vso[task.logissue type=warning;]No Changes in $(folder) folder"            
          }
        name: SetVar
           
    - deployment: DEV_Deploy_Infrastructure
      displayName: DEV Deploy Infrastructure
      dependsOn: CheckChanges
      # Do not deploy on a PR
      # Deploy only if its changes and merger or nightly build or variable is true. 
      condition: >-
        and(
          ne(variables['Build.Reason'], 'PullRequest'),        
          or(
            and( eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(dependencies.CheckChanges.outputs['SetVar.isFolder'], 'True') ),
            and( eq(variables['Build.CronSchedule.DisplayName'], 'Nightly build'), eq(dependencies.CheckChanges.outputs['SetVar.isFolder'], 'True') ),
            eq(variables['deployToDev'], 'true')
          )
        )
      pool:      
        vmImage: ubuntu-latest
      continueOnError: false
      environment: 'mercury-dev'
      strategy:
        runOnce: 
          deploy:
            steps:
            - template: Templates/terraform-plan-show-apply-template.yml@templates
              parameters: 
                backendServiceAWS: ${{ variables.serviceAccount }}
                backendAWSBucketName: $(backendAWSBucketName)
                backendAWSKey: $(backendAWSKey)
                environmentServiceNameAWS: ${{ variables.serviceAccount }}

  - stage: QA_Terraform
    displayName: QA Plan and Apply
    dependsOn: DEV_Terraform
    # Deploy if its is the nightly build with changes or variable is true. 
    condition: >-
      or(
        and(succeeded('DEV_Terraform'), eq(variables['Build.CronSchedule.DisplayName'], 'Nightly build'), eq(stagedependencies.DEV_Terraform.outputs['CheckChanges.SetVar.isFolder'], 'True')),
        eq(variables['deployToQA'], 'true')
      )

    variables:
    - group: BEMod-Terraform-QA   
    - name: serviceAccount
      value: 'TerraformDeploy-QA'

    jobs:
    - deployment:
      displayName: QA Deploy Infrastructure
      pool:      
        vmImage: ubuntu-latest
      continueOnError: false
      environment: 'carriernotification-qa'
      strategy:
        runOnce: 
          deploy:
            steps:
            - template: Templates/terraform-plan-show-apply-template.yml@templates
              parameters: 
                backendServiceAWS: ${{ variables.serviceAccount }}
                backendAWSBucketName: $(backendAWSBucketName)
                backendAWSKey: $(backendAWSKey)
                environmentServiceNameAWS: ${{ variables.serviceAccount }}         

  - stage: UAT_Terraform
    displayName: UAT Plan and Apply
    dependsOn: QA_Terraform
    condition: >-
      or(
        and(succeeded('QA_Terraform'), eq(variables['Build.CronSchedule.DisplayName'], 'Nightly build')),
        eq(variables['deployToUAT'], 'true')
      )

    variables:
      - group: BEMod-Terraform-UAT  
      - name: serviceAccount
        value: 'TerraformDeploy-UAT' 

    jobs:
    - deployment:
      displayName: UAT Deploy Infrastructure
      pool:      
        vmImage: ubuntu-latest
      continueOnError: false
      environment: 'carriernotification-uat'
      strategy:
        runOnce: 
          deploy:
            steps:
              - template: Templates/terraform-plan-show-apply-template.yml@templates
                parameters: 
                  backendServiceAWS: ${{ variables.serviceAccount }}
                  backendAWSBucketName: $(backendAWSBucketName)
                  backendAWSKey: $(backendAWSKey)
                  environmentServiceNameAWS: ${{ variables.serviceAccount }} 

  - stage: Prod_Terraform
    displayName: PROD Plan and Apply
    dependsOn: UAT_Terraform
    condition: >-
      or(
        and(succeeded('UAT_Terraform'), eq(variables['Build.CronSchedule.DisplayName'], 'Nightly build')),
        eq(variables['deployToProd'], 'true')
      )

    variables:
      - group: BEMod-Terraform-Prod   
      - name: serviceAccount
        value: 'TerraformDeploy-PROD'

    jobs:
      - deployment: PROD_Terraform_Deployment
        displayName: Deploy Prod Infrastructure
        pool:      
          vmImage: ubuntu-latest
        continueOnError: false
        environment: 'carriernotification-prod'
        strategy:
          runOnce: 
            deploy:
              steps:
                - template: Templates/terraform-plan-show-apply-template.yml@templates
                  parameters: 
                      backendServiceAWS: ${{ variables.serviceAccount }}
                      backendAWSBucketName: $(backendAWSBucketName)
                      backendAWSKey: $(backendAWSKey)
                      environmentServiceNameAWS: ${{ variables.serviceAccount }}       